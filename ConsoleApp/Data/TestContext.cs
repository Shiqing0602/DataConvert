// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ConsoleApp.Models;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ConsoleApp.Models;

namespace ConsoleApp.Data
{
    public partial class TestContext : DbContext
    {
        public TestContext()
        {
        }

        public TestContext(DbContextOptions<TestContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Chk> Chk { get; set; }
        public virtual DbSet<Dru> Dru { get; set; }
        public virtual DbSet<Fmu> Fmu { get; set; }
        public virtual DbSet<Gddru> Gddru { get; set; }
        public virtual DbSet<Gdfan> Gdfan { get; set; }
        public virtual DbSet<Ifinfo> Ifinfo { get; set; }
        public virtual DbSet<Ifstr> Ifstr { get; set; }
        public virtual DbSet<Ill> Ill { get; set; }
        public virtual DbSet<Lab> Lab { get; set; }
        public virtual DbSet<Med> Med { get; set; }
        public virtual DbSet<Ope> Ope { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=Test;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Chk>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cmemo)
                    .HasColumnName("CMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Conid).HasColumnName("CONID");

                entity.Property(e => e.Cvocable)
                    .IsRequired()
                    .HasColumnName("CVOCABLE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cxmlmemo)
                    .HasColumnName("CXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.Ememo)
                    .HasColumnName("EMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Evocable)
                    .HasColumnName("EVOCABLE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Hkvocable)
                    .HasColumnName("HKVOCABLE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Hxmlmemo)
                    .HasColumnName("HXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.KeyNo).HasColumnName("KEY_NO");

                entity.Property(e => e.RelationCount).HasColumnName("Relation_Count");
            });

            modelBuilder.Entity<Dru>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cmemo)
                    .HasColumnName("CMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Conid).HasColumnName("CONID");

                entity.Property(e => e.Cvocable)
                    .IsRequired()
                    .HasColumnName("CVOCABLE")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Cxmlmemo)
                    .HasColumnName("CXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.Ememo)
                    .HasColumnName("EMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Evocable)
                    .HasColumnName("EVOCABLE")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Hkvocable)
                    .HasColumnName("HKVOCABLE")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Hxmlmemo)
                    .HasColumnName("HXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.Jy).HasColumnName("jy");

                entity.Property(e => e.KeyNo).HasColumnName("KEY_NO");

                entity.Property(e => e.MaxV).HasColumnName("maxV");

                entity.Property(e => e.MinV).HasColumnName("minV");

                entity.Property(e => e.RelationCount).HasColumnName("Relation_Count");
            });

            modelBuilder.Entity<Fmu>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cmemo)
                    .HasColumnName("CMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Conid).HasColumnName("CONID");

                entity.Property(e => e.Cvocable)
                    .IsRequired()
                    .HasColumnName("CVOCABLE")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cxmlmemo)
                    .HasColumnName("CXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.Ememo)
                    .HasColumnName("EMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Evocable)
                    .HasColumnName("EVOCABLE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Hkvocable)
                    .HasColumnName("HKVOCABLE")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Hxmlmemo)
                    .HasColumnName("HXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.Jy).HasColumnName("JY");

                entity.Property(e => e.KeyNo).HasColumnName("KEY_NO");

                entity.Property(e => e.RelationCount).HasColumnName("Relation_Count");
            });

            modelBuilder.Entity<Gddru>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GDDRU");

                entity.Property(e => e.Druconid).HasColumnName("DRUCONID");

                entity.Property(e => e.DrukeyNo).HasColumnName("DRUKey_No");

                entity.Property(e => e.Drumemo)
                    .HasColumnName("DRUMEMO")
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.Druname)
                    .HasColumnName("DRUNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Drutbl)
                    .HasColumnName("DRUTBL")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Fconid).HasColumnName("FCONID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Ifid).HasColumnName("IFID");

                entity.Property(e => e.Inx).HasColumnName("INX");

                entity.Property(e => e.Isuse).HasColumnName("ISUSE");

                entity.Property(e => e.T1)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.T2)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Gdfan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GDFAN");

                entity.Property(e => e.Fanmemo)
                    .HasColumnName("FANMEMO")
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.Fconid).HasColumnName("FCONID");

                entity.Property(e => e.Fstr)
                    .HasColumnName("FSTR")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Ftbl)
                    .HasColumnName("FTBL")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Ifid).HasColumnName("IFID");

                entity.Property(e => e.Inx).HasColumnName("INX");

                entity.Property(e => e.Isuse).HasColumnName("ISUSE");

                entity.Property(e => e.T1).HasMaxLength(300);

                entity.Property(e => e.T2)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ifinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IFINFO");

                entity.Property(e => e.Conid).HasColumnName("CONID");

                entity.Property(e => e.Eng)
                    .HasColumnName("eng")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ifid).HasColumnName("IFID");

                entity.Property(e => e.Ifmemo)
                    .HasColumnName("IFMEMO")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Ifno).HasColumnName("IFNO");

                entity.Property(e => e.Ifstr)
                    .HasColumnName("IFSTR")
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.Inx).HasColumnName("inx");

                entity.Property(e => e.Isuse).HasColumnName("ISUSE");

                entity.Property(e => e.Op).HasColumnName("op");

                entity.Property(e => e.T1)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.T2)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.T3)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.Tbl)
                    .HasColumnName("TBL")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Wrdate)
                    .HasColumnName("WRDATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Ifstr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IFStr");

                entity.Property(e => e.Acv)
                    .HasColumnName("ACV")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AkeyNo).HasColumnName("AKEY_NO");

                entity.Property(e => e.Atbl)
                    .HasColumnName("ATBL")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Bcv)
                    .HasColumnName("BCV")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BkeyNo).HasColumnName("BKEY_NO");

                entity.Property(e => e.Btbl)
                    .HasColumnName("BTBL")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Ifstr1)
                    .HasColumnName("IFSTR")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Keyno).HasColumnName("KEYNO");

                entity.Property(e => e.Memo)
                    .HasColumnName("memo")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Wrdate)
                    .HasColumnName("WRDATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Ill>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cadvice)
                    .HasColumnName("CADVICE")
                    .HasColumnType("image");

                entity.Property(e => e.Cmemo)
                    .HasColumnName("CMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Conid).HasColumnName("CONID");

                entity.Property(e => e.Cvocable)
                    .HasColumnName("CVOCABLE")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Cxmlmemo)
                    .HasColumnName("CXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.Eadvice)
                    .HasColumnName("EADVICE")
                    .HasColumnType("image");

                entity.Property(e => e.Ememo)
                    .HasColumnName("EMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Evocable)
                    .HasColumnName("EVOCABLE")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.HXmlmemo)
                    .HasColumnName("hXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.Hkvocable)
                    .HasColumnName("HKVOCABLE")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Illtype)
                    .HasColumnName("illtype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IsCill).HasColumnName("IsCIll");

                entity.Property(e => e.Ischild).HasColumnName("ischild");

                entity.Property(e => e.Isfool).HasColumnName("isfool");

                entity.Property(e => e.Isfz).HasColumnName("isfz");

                entity.Property(e => e.Isman).HasColumnName("isman");

                entity.Property(e => e.Isrz).HasColumnName("isrz");

                entity.Property(e => e.Iswoman).HasColumnName("iswoman");

                entity.Property(e => e.KeyNo).HasColumnName("KEY_NO");

                entity.Property(e => e.MainDep)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Nosymlink)
                    .HasColumnName("nosymlink")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OthDep)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Photo).HasColumnType("image");

                entity.Property(e => e.RelationCount).HasColumnName("Relation_Count");

                entity.Property(e => e.Rright)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Smemo)
                    .HasColumnName("SMEMO")
                    .HasColumnType("text");

                entity.Property(e => e.Smemo1)
                    .HasColumnName("smemo1")
                    .HasColumnType("text");

                entity.Property(e => e.SymaddtionNum)
                    .HasColumnName("SYMAddtionNum")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Symlink)
                    .HasColumnName("SYMLINK")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Xmlmemo)
                    .HasColumnName("XMLMEMO")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<Lab>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cmemo)
                    .HasColumnName("CMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Conid).HasColumnName("CONID");

                entity.Property(e => e.Cvocable)
                    .IsRequired()
                    .HasColumnName("CVOCABLE")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Cxmlmemo)
                    .HasColumnName("CXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.Ememo)
                    .HasColumnName("EMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Evocable)
                    .HasColumnName("EVOCABLE")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Hkvocable)
                    .HasColumnName("HKVOCABLE")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Hxmlmemo)
                    .HasColumnName("HXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.KeyNo).HasColumnName("KEY_NO");

                entity.Property(e => e.RelationCount).HasColumnName("Relation_Count");

                entity.Property(e => e.Source)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Med>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cmemo)
                    .HasColumnName("CMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Conid).HasColumnName("CONID");

                entity.Property(e => e.Cvocable)
                    .IsRequired()
                    .HasColumnName("CVOCABLE")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Cxmlmemo)
                    .HasColumnName("CXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.Ememo)
                    .HasColumnName("EMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Evocable)
                    .HasColumnName("EVOCABLE")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Hkvocable)
                    .HasColumnName("HKVOCABLE")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Hxmlmemo)
                    .HasColumnName("HXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.KeyNo).HasColumnName("KEY_NO");

                entity.Property(e => e.RelationCount).HasColumnName("Relation_Count");
            });

            modelBuilder.Entity<Ope>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AidLink).HasColumnName("AidLInk");

                entity.Property(e => e.Cmemo)
                    .HasColumnName("CMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Conid).HasColumnName("CONID");

                entity.Property(e => e.Cvocable)
                    .IsRequired()
                    .HasColumnName("CVOCABLE")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Cxmlmemo)
                    .HasColumnName("CXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.Ememo)
                    .HasColumnName("EMEMO")
                    .HasColumnType("image");

                entity.Property(e => e.Evocable)
                    .HasColumnName("EVOCABLE")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Hkvocable)
                    .HasColumnName("HKVOCABLE")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Hxmlmemo)
                    .HasColumnName("HXMLMemo")
                    .HasColumnType("text");

                entity.Property(e => e.KeyNo).HasColumnName("KEY_NO");

                entity.Property(e => e.RelationCount).HasColumnName("Relation_Count");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}